mysql中order by的秘密

前言

最近在学习mysql中的优化，在explain一个语句的时候，在Extra一栏中发现了 Using filesort, 看名字感觉是文件排序，不懂，就去扒拉一下，大量google之后，原来是mysql排序的意思，然后发现了mysql关于排序的秘密，就总结了下来，然后就被你看到了。

一、mysql排序算法

mysql把需要排序的地方，统称叫filesort， 名字里虽然有个file, 但不一定是文件排序的意思，可能就是在内存完成的排序，具体要看配置和取出数据的大小而定。

mysql的filesort有两种算法，叫双路排序和单路排序。MySQL 4.1之前是使用双路排序, 之后版本会增加了改进的单路排序。但在实际上用到哪种算法，由一个参数max_length_for_sort_data决定。具体怎么决定的？先看下面详情。

1、双路排序

双路排序，字面意思就是两次扫描磁盘，最终得到数据。

下面以一个简单的例子才阐述整个过程。

1
2
3
4
 
    //把user表大于18岁的用户的名字和年龄查出来，按照年龄排序
    select `name`, `age` from 'user' where `age` > '18' order by `age` desc;
 
按照索引或者全盘扫描，从磁盘中把符合要求的数据都给找出来。
把每一条数据中参与排序的列以及指针信息（每一行数据在磁盘的位置，简称row point） 丢给缓冲区，就是sort_buffer。（只取出每条数据的age和row ponit）。
数据在sort buffer 中，按照用户的要求，进行排序。
把排序的结果，丢给 read_rnd_buffer(随机读取缓存区)
read_rnd_buffer根据row point，向磁盘读取每条数据的其他信息。
然后合并其他的字段的信息，返回客户端。
ifxoxo.com--orderby

双路排序，总结为 从磁盘取排序字段，在buffer进行排序，再从磁盘取其他字段。

2、单路排序

看完第一种算法，你会发现，取一批数据，要对磁盘进行了两次扫描，总所周知，I\O是很耗时的，所以在mysql4.1之后，出现了第二种改进的算法，就是单路排序。

(1)单路排序的的过程

按照索引或者全盘扫描，从磁盘中把符合要求的数据都给找出来。
把每一条数据中所有字段都取出，丢给sort_buffer。
数据在sort buffer 中，按照用户的要求，进行排序。
然后合并其他的字段的信息，返回客户端。
ifxoxo.com - mysql_orderby2

单路排序，总结为 从磁盘把所有数据都取出，在buffer排序，返回结果。
从流程上来看 真是又简单又高效，何乐而不为呢？

(2)单路排序的风险

单单从流程上来看，对比 多路排序（后面简称方法A），单路排序（下面简称方法B） 真是帅到爆。 但是，你可能忽略了一点， 在sort_buffer中，方法B比方法A要多占用很多空间，因为方法B是把所有字段都取出, 所以有可能取出的数据的总大小超出了sort_buffer的容量，导致每次只能取sort_buffer容量大小的数据，进行排序（创建tmp文件，多路合并），排完再取取sort_buffer容量大小，再排……从而多次I/O。

本来想省一次I/O操作，反而导致了大量的I/O操作，反而得不偿失。

为了一定程度的解决这个问题，mysql引进了一个配置max_length_for_sort_data(默认是1024)，只有满足以下两个条件，才会用单路排序算法。
1. Query 语句所取出的字段类型大小总和小于max_length_for_sort_data 。
2. 排序的字段不包含TEXT和BLOB类型。

3、两种算法总结

当Query的字段大小总和小于max_length_for_sort_data 而且排序字段不是 TEXT|BLOB 类型时，会用改进后的算法——单路排序， 否则用老算法——多路排序。
两种算法的数据都有可能超出sort_buffer的容量，超出之后，会创建tmp文件进行合并排序，导致多次I/O，但是用改进算法的风险会更大一些。
二、提高order by的速度

看完前面两种算法的原理和区别，相信你也知道该如何提高order by的速度了，我在此不妨再总结一下
1. 只Query需要的字段， 这点非常重要。
select * 是一个大忌， 在这里的影响是：（1）字段类型大小总和超出max_length_for_sort_data,从而用不了改进的算法。（2）取出的数据总容量大于sort_buffer_size,从而要进行合并排序，导致多次I/O。
2. 尝试提高 sort_buffer_size
不管用哪种算法，提高这个参数都会提高效率，当然，要根据系统的能力去提高，因为这个参数是针对每个进程的。
3. 尝试提高 max_length_for_sort_data
提高这个参数， 会增加用改进算法的概率。但是如果设的太高，数据总容量超出sort_buffer_size的概率就增大，明显症状是高的磁盘I/O活动和低的处理器使用率.
4. 尝试提高 read_rnd_buffer_size
提高这个参数，只有在用到旧算法（第5步）的时候，才有效果。

注： 上面提到的三个参数，都是针对每个connect，也就是每个connect如果需要排序的话，都会占用到这么多的空间， 如果并发有100个，总的空间就需要X100的，所以要谨慎。
